-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pooling_fprop1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_core : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_part : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_parent : IN STD_LOGIC_VECTOR (7 downto 0);
    c1_conv_layer1_map_w : IN STD_LOGIC_VECTOR (31 downto 0);
    c1_conv_layer1_map_h : IN STD_LOGIC_VECTOR (31 downto 0);
    c1_conv_layer1_map_count : IN STD_LOGIC_VECTOR (31 downto 0);
    c1_conv_layer1_kernel_w : IN STD_LOGIC_VECTOR (31 downto 0);
    c1_conv_layer1_kernel_h : IN STD_LOGIC_VECTOR (31 downto 0);
    c1_conv_layer1_kernel_count : IN STD_LOGIC_VECTOR (31 downto 0);
    c1_conv_layer2_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    c1_conv_layer2_data_ce0 : OUT STD_LOGIC;
    c1_conv_layer2_data_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    c1_conv_layer2_data_ce1 : OUT STD_LOGIC;
    c1_conv_layer2_data_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_error_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    c1_conv_layer2_error_ce0 : OUT STD_LOGIC;
    c1_conv_layer2_error_we0 : OUT STD_LOGIC;
    c1_conv_layer2_error_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_error_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_error_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    c1_conv_layer2_error_ce1 : OUT STD_LOGIC;
    c1_conv_layer2_error_we1 : OUT STD_LOGIC;
    c1_conv_layer2_error_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_error_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_b_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    c1_conv_layer2_b_ce0 : OUT STD_LOGIC;
    c1_conv_layer2_b_we0 : OUT STD_LOGIC;
    c1_conv_layer2_b_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_b_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_b_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    c1_conv_layer2_b_ce1 : OUT STD_LOGIC;
    c1_conv_layer2_b_we1 : OUT STD_LOGIC;
    c1_conv_layer2_b_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_b_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_db_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    c1_conv_layer2_db_ce0 : OUT STD_LOGIC;
    c1_conv_layer2_db_we0 : OUT STD_LOGIC;
    c1_conv_layer2_db_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_db_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_db_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    c1_conv_layer2_db_ce1 : OUT STD_LOGIC;
    c1_conv_layer2_db_we1 : OUT STD_LOGIC;
    c1_conv_layer2_db_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_db_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_W_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    c1_conv_layer2_W_ce0 : OUT STD_LOGIC;
    c1_conv_layer2_W_we0 : OUT STD_LOGIC;
    c1_conv_layer2_W_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_W_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_W_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    c1_conv_layer2_W_ce1 : OUT STD_LOGIC;
    c1_conv_layer2_W_we1 : OUT STD_LOGIC;
    c1_conv_layer2_W_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_W_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_dW_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    c1_conv_layer2_dW_ce0 : OUT STD_LOGIC;
    c1_conv_layer2_dW_we0 : OUT STD_LOGIC;
    c1_conv_layer2_dW_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_dW_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_dW_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    c1_conv_layer2_dW_ce1 : OUT STD_LOGIC;
    c1_conv_layer2_dW_we1 : OUT STD_LOGIC;
    c1_conv_layer2_dW_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_dW_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_map_common_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    c1_conv_layer2_map_common_ce0 : OUT STD_LOGIC;
    c1_conv_layer2_map_common_we0 : OUT STD_LOGIC;
    c1_conv_layer2_map_common_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_map_common_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_map_common_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    c1_conv_layer2_map_common_ce1 : OUT STD_LOGIC;
    c1_conv_layer2_map_common_we1 : OUT STD_LOGIC;
    c1_conv_layer2_map_common_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c1_conv_layer2_map_common_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer1_map_w : IN STD_LOGIC_VECTOR (31 downto 0);
    s2_pooling_layer1_map_h : IN STD_LOGIC_VECTOR (31 downto 0);
    s2_pooling_layer1_map_count : IN STD_LOGIC_VECTOR (31 downto 0);
    s2_pooling_layer1_kernel_w : IN STD_LOGIC_VECTOR (31 downto 0);
    s2_pooling_layer1_kernel_h : IN STD_LOGIC_VECTOR (31 downto 0);
    s2_pooling_layer1_kernel_count : IN STD_LOGIC_VECTOR (31 downto 0);
    s2_pooling_layer2_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    s2_pooling_layer2_data_ce0 : OUT STD_LOGIC;
    s2_pooling_layer2_data_we0 : OUT STD_LOGIC;
    s2_pooling_layer2_data_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_error_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    s2_pooling_layer2_error_ce0 : OUT STD_LOGIC;
    s2_pooling_layer2_error_we0 : OUT STD_LOGIC;
    s2_pooling_layer2_error_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_error_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_error_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    s2_pooling_layer2_error_ce1 : OUT STD_LOGIC;
    s2_pooling_layer2_error_we1 : OUT STD_LOGIC;
    s2_pooling_layer2_error_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_error_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_b_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    s2_pooling_layer2_b_ce0 : OUT STD_LOGIC;
    s2_pooling_layer2_b_we0 : OUT STD_LOGIC;
    s2_pooling_layer2_b_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_b_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_b_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    s2_pooling_layer2_b_ce1 : OUT STD_LOGIC;
    s2_pooling_layer2_b_we1 : OUT STD_LOGIC;
    s2_pooling_layer2_b_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_b_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_db_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    s2_pooling_layer2_db_ce0 : OUT STD_LOGIC;
    s2_pooling_layer2_db_we0 : OUT STD_LOGIC;
    s2_pooling_layer2_db_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_db_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_db_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    s2_pooling_layer2_db_ce1 : OUT STD_LOGIC;
    s2_pooling_layer2_db_we1 : OUT STD_LOGIC;
    s2_pooling_layer2_db_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_db_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_W_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    s2_pooling_layer2_W_ce0 : OUT STD_LOGIC;
    s2_pooling_layer2_W_we0 : OUT STD_LOGIC;
    s2_pooling_layer2_W_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_W_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_W_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    s2_pooling_layer2_W_ce1 : OUT STD_LOGIC;
    s2_pooling_layer2_W_we1 : OUT STD_LOGIC;
    s2_pooling_layer2_W_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_W_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_dW_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    s2_pooling_layer2_dW_ce0 : OUT STD_LOGIC;
    s2_pooling_layer2_dW_we0 : OUT STD_LOGIC;
    s2_pooling_layer2_dW_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_dW_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_dW_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    s2_pooling_layer2_dW_ce1 : OUT STD_LOGIC;
    s2_pooling_layer2_dW_we1 : OUT STD_LOGIC;
    s2_pooling_layer2_dW_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_dW_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_map_common_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    s2_pooling_layer2_map_common_ce0 : OUT STD_LOGIC;
    s2_pooling_layer2_map_common_we0 : OUT STD_LOGIC;
    s2_pooling_layer2_map_common_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_map_common_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_map_common_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    s2_pooling_layer2_map_common_ce1 : OUT STD_LOGIC;
    s2_pooling_layer2_map_common_we1 : OUT STD_LOGIC;
    s2_pooling_layer2_map_common_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s2_pooling_layer2_map_common_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of max_pooling_fprop1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pooling_fprop1_max_pooling_fprop1,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu19p-fsvb3824-2-e,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.983000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5908,HLS_SYN_LUT=6845,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (77 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (77 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (77 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (77 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (77 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (77 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (77 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (77 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (77 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (77 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (77 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (77 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal map_w_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal map_h_reg_563 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_pooling_layer1_map_count_read_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln197_fu_281_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln197_reg_573 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln197_1_fu_285_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln197_1_reg_578 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln197_2_fu_289_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln197_2_reg_583 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln197_fu_310_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln197_reg_591 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_6_fu_320_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_reg_596 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvars_iv_next39_fu_337_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvars_iv_next39_reg_606 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_fu_351_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_reg_611 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_16_fu_356_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_16_reg_616 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln204_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln204_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next31_fu_406_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvars_iv_next31_reg_629 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln203_1_fu_433_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln203_1_reg_634 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln212_1_fu_443_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln212_1_reg_639 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln201_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln201_reg_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln199_fu_454_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln199_1_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal c1_conv_layer2_data_load_reg_664 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln201_1_fu_470_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln201_1_reg_669 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal max_value_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_value_reg_674 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_489_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal m_1_reg_679 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ep_reg_692 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_276_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal em_reg_698 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_259_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub1_i_reg_704 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_i_reg_709 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_i_reg_714 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start : STD_LOGIC;
    signal grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_done : STD_LOGIC;
    signal grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_idle : STD_LOGIC;
    signal grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_ready : STD_LOGIC;
    signal grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_ce : STD_LOGIC;
    signal grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_ce0 : STD_LOGIC;
    signal grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_ce1 : STD_LOGIC;
    signal grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_max_value_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_max_value_1_out_ap_vld : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_reg_186 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln197_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln201_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv24_reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv19_reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_221 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln199_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal m_reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln203_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln212_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_128 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal c1_conv_layer2_data_ce0_local : STD_LOGIC;
    signal s2_pooling_layer2_data_we0_local : STD_LOGIC;
    signal bitcast_ln212_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s2_pooling_layer2_data_ce0_local : STD_LOGIC;
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln197_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln197_3_fu_316_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln199_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_351_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_16_fu_356_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_367_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln204_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_377_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln201_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln201_2_fu_416_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln203_fu_420_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_425_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln201_fu_412_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln212_fu_438_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_fu_479_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln11_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel_fu_506_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln11_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln11_fu_520_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln_fu_524_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_259_ce : STD_LOGIC;
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_263_ce : STD_LOGIC;
    signal grp_fu_267_ce : STD_LOGIC;
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_fu_271_ce : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_fu_276_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (77 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component max_pooling_fprop1_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        indvars_iv19_cast : IN STD_LOGIC_VECTOR (31 downto 0);
        max_value : IN STD_LOGIC_VECTOR (63 downto 0);
        sext_ln201 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_7 : IN STD_LOGIC_VECTOR (16 downto 0);
        empty : IN STD_LOGIC_VECTOR (16 downto 0);
        zext_ln203 : IN STD_LOGIC_VECTOR (16 downto 0);
        c1_conv_layer2_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        c1_conv_layer2_data_ce0 : OUT STD_LOGIC;
        c1_conv_layer2_data_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        c1_conv_layer2_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        c1_conv_layer2_data_ce1 : OUT STD_LOGIC;
        c1_conv_layer2_data_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_1 : IN STD_LOGIC_VECTOR (16 downto 0);
        max_value_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        max_value_1_out_ap_vld : OUT STD_LOGIC );
    end component;


    component max_pooling_fprop1_dsub_64ns_64ns_64_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component max_pooling_fprop1_dadd_64ns_64ns_64_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component max_pooling_fprop1_ddiv_64ns_64ns_64_31_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component max_pooling_fprop1_dexp_64ns_64ns_64_30_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component max_pooling_fprop1_mul_16s_16s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component max_pooling_fprop1_mul_17s_17s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244 : component max_pooling_fprop1_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start,
        ap_done => grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_done,
        ap_idle => grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_idle,
        ap_ready => grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_ready,
        ap_ce => grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_ce,
        indvars_iv19_cast => indvars_iv19_reg_209,
        max_value => max_value_reg_674,
        sext_ln201 => select_ln204_reg_621,
        empty_7 => trunc_ln197_reg_573,
        empty => trunc_ln201_1_reg_669,
        zext_ln203 => tmp_6_reg_596,
        c1_conv_layer2_data_address0 => grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_address0,
        c1_conv_layer2_data_ce0 => grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_ce0,
        c1_conv_layer2_data_q0 => c1_conv_layer2_data_q0,
        c1_conv_layer2_data_address1 => grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_address1,
        c1_conv_layer2_data_ce1 => grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_ce1,
        c1_conv_layer2_data_q1 => c1_conv_layer2_data_q1,
        m_1 => m_1_reg_679,
        max_value_1_out => grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_max_value_1_out,
        max_value_1_out_ap_vld => grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_max_value_1_out_ap_vld);

    dsub_64ns_64ns_64_8_full_dsp_1_U14 : component max_pooling_fprop1_dsub_64ns_64ns_64_8_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ep_reg_692,
        din1 => em_reg_698,
        ce => grp_fu_259_ce,
        dout => grp_fu_259_p2);

    dadd_64ns_64ns_64_8_full_dsp_1_U15 : component max_pooling_fprop1_dadd_64ns_64ns_64_8_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ep_reg_692,
        din1 => em_reg_698,
        ce => grp_fu_263_ce,
        dout => grp_fu_263_p2);

    ddiv_64ns_64ns_64_31_no_dsp_1_U16 : component max_pooling_fprop1_ddiv_64ns_64ns_64_31_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub1_i_reg_704,
        din1 => add_i_reg_709,
        ce => grp_fu_267_ce,
        dout => grp_fu_267_p2);

    dexp_64ns_64ns_64_30_full_dsp_1_U17 : component max_pooling_fprop1_dexp_64ns_64ns_64_30_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_max_value_1_out,
        ce => grp_fu_271_ce,
        dout => grp_fu_271_p2);

    dexp_64ns_64ns_64_30_full_dsp_1_U18 : component max_pooling_fprop1_dexp_64ns_64ns_64_30_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => grp_fu_276_p1,
        ce => grp_fu_276_ce,
        dout => grp_fu_276_p2);

    mul_16s_16s_16_1_1_U19 : component max_pooling_fprop1_mul_16s_16s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => empty_fu_351_p0,
        din1 => trunc_ln197_1_reg_578,
        dout => empty_fu_351_p2);

    mul_17s_17s_17_1_1_U20 : component max_pooling_fprop1_mul_17s_17s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        din0 => empty_16_fu_356_p0,
        din1 => trunc_ln197_2_reg_583,
        dout => empty_16_fu_356_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                if ((ap_const_logic_1 = ap_ce)) then 
                    ap_CS_fsm <= ap_NS_fsm;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = ap_ce))) then 
                    grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_ready = ap_const_logic_1)) then 
                    grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (((icmp_ln201_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    i_reg_186 <= indvars_iv_next39_reg_606;
                elsif (((icmp_ln197_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    i_reg_186 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv19_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (((icmp_ln201_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    indvars_iv19_reg_209 <= add_ln199_fu_454_p2;
                elsif (((icmp_ln197_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    indvars_iv19_reg_209 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv24_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (((icmp_ln201_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    indvars_iv24_reg_197 <= add_ln199_1_fu_460_p2;
                elsif (((icmp_ln197_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    indvars_iv24_reg_197 <= ap_const_lv32_2;
                end if;
            end if; 
        end if;
    end process;

    j_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                    j_reg_221 <= indvars_iv_next31_reg_629;
                elsif (((icmp_ln199_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    j_reg_221 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    k_fu_128 <= ap_const_lv31_0;
                elsif (((icmp_ln199_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    k_fu_128 <= add_ln197_reg_591;
                end if;
            end if; 
        end if;
    end process;

    m_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                    m_reg_232 <= add_ln201_reg_644;
                elsif (((icmp_ln199_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    m_reg_232 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                add_i_reg_709 <= grp_fu_263_p2;
                sub1_i_reg_704 <= grp_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln197_reg_591 <= add_ln197_fu_310_p2;
                    tmp_6_reg_596(16 downto 10) <= tmp_6_fu_320_p3(16 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce))) then
                add_ln201_reg_644 <= add_ln201_fu_448_p2;
                indvars_iv_next31_reg_629 <= indvars_iv_next31_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    add_ln203_1_reg_634(16 downto 1) <= add_ln203_1_fu_433_p2(16 downto 1);
                add_ln212_1_reg_639 <= add_ln212_1_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                c1_conv_layer2_data_load_reg_664 <= c1_conv_layer2_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                div_i_reg_714 <= grp_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                em_reg_698 <= grp_fu_276_p2;
                ep_reg_692 <= grp_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                empty_16_reg_616 <= empty_16_fu_356_p2;
                empty_reg_611 <= empty_fu_351_p2;
                select_ln204_reg_621 <= select_ln204_fu_385_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce))) then
                indvars_iv_next39_reg_606 <= indvars_iv_next39_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    m_1_reg_679(16 downto 1) <= m_1_fu_489_p3(16 downto 1);
                max_value_reg_674 <= max_value_fu_475_p1;
                trunc_ln201_1_reg_669 <= trunc_ln201_1_fu_470_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                map_h_reg_563 <= s2_pooling_layer1_map_h;
                map_w_reg_558 <= s2_pooling_layer1_map_w;
                s2_pooling_layer1_map_count_read_reg_568 <= s2_pooling_layer1_map_count;
                trunc_ln197_1_reg_578 <= trunc_ln197_1_fu_285_p1;
                trunc_ln197_2_reg_583 <= trunc_ln197_2_fu_289_p1;
                trunc_ln197_reg_573 <= trunc_ln197_fu_281_p1;
            end if;
        end if;
    end process;
    tmp_6_reg_596(9 downto 0) <= "0000000000";
    add_ln203_1_reg_634(0) <= '0';
    m_1_reg_679(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_done, ap_CS_fsm_state8, icmp_ln197_fu_305_p2, icmp_ln201_fu_401_p2, icmp_ln199_fu_332_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln197_fu_305_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln199_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln201_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln197_fu_310_p2 <= std_logic_vector(unsigned(k_fu_128) + unsigned(ap_const_lv31_1));
    add_ln199_1_fu_460_p2 <= std_logic_vector(unsigned(indvars_iv24_reg_197) + unsigned(ap_const_lv32_2));
    add_ln199_fu_454_p2 <= std_logic_vector(unsigned(indvars_iv19_reg_209) + unsigned(ap_const_lv32_2));
    add_ln201_fu_448_p2 <= std_logic_vector(unsigned(m_reg_232) + unsigned(ap_const_lv32_2));
    add_ln203_1_fu_433_p2 <= std_logic_vector(unsigned(tmp_6_reg_596) + unsigned(shl_ln_fu_425_p3));
    add_ln203_fu_420_p2 <= std_logic_vector(unsigned(trunc_ln201_2_fu_416_p1) + unsigned(empty_reg_611));
    add_ln212_1_fu_443_p2 <= std_logic_vector(unsigned(tmp_6_reg_596) + unsigned(add_ln212_fu_438_p2));
    add_ln212_fu_438_p2 <= std_logic_vector(unsigned(trunc_ln201_fu_412_p1) + unsigned(empty_16_reg_616));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state17_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state18_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state19_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_ce)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_ce))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state21_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state22_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state23_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state24_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state25_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state26_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state26_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state26_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state27_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state28_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state28_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state28_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state29_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state29_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state29_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state30_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state30_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state30_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state31_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state31_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state31_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state32_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state32_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state32_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state33_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state33_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state33_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state34_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state35_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state35_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state35_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state36_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state36_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state36_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state37_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state37_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state37_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state38_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state39_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state40_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state40_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state40_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state41_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state41_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state41_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state42_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state42_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state42_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state43_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state43_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state43_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state44_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state44_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state44_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state45_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state45_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state45_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state46_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state46_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state46_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state47_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state47_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state47_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state48_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state48_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state48_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state49_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state49_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state49_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state50_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state50_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state50_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state51_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state51_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state51_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state52_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state52_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state52_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state53_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state53_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state53_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state54_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state54_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state54_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state55_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state55_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state55_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state56_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state56_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state56_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state57_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state57_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state57_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state58_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state58_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state58_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state59_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state59_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state59_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state60_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state60_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state60_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state61_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state61_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state61_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state62_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state62_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state62_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state63_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state63_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state63_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state64_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state64_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state64_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state65_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state65_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state65_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state66_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state66_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state66_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state67_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state67_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state67_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state68_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state68_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state68_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state69_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state69_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state69_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state70_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state70_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state70_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state71_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state71_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state71_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state72_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state72_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state72_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state73_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state73_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state73_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state74_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state74_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state74_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state75_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state75_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state75_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state76_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state76_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state76_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state77_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state77_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state77_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state78_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state78_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state78_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(ap_ce, grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_done)
    begin
        if (((grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_done = ap_const_logic_0) or (ap_const_logic_0 = ap_ce))) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_ce, ap_CS_fsm_state2, icmp_ln197_fu_305_p2)
    begin
        if (((icmp_ln197_fu_305_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state2, icmp_ln197_fu_305_p2)
    begin
        if (((icmp_ln197_fu_305_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bit_sel_fu_506_p3 <= bitcast_ln11_fu_502_p1(63 downto 63);
    bitcast_ln11_fu_502_p1 <= grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_max_value_1_out;
    bitcast_ln212_fu_541_p1 <= div_i_reg_714;
    c1_conv_layer2_W_address0 <= ap_const_lv16_0;
    c1_conv_layer2_W_address1 <= ap_const_lv16_0;
    c1_conv_layer2_W_ce0 <= ap_const_logic_0;
    c1_conv_layer2_W_ce1 <= ap_const_logic_0;
    c1_conv_layer2_W_d0 <= ap_const_lv64_0;
    c1_conv_layer2_W_d1 <= ap_const_lv64_0;
    c1_conv_layer2_W_we0 <= ap_const_logic_0;
    c1_conv_layer2_W_we1 <= ap_const_logic_0;
    c1_conv_layer2_b_address0 <= ap_const_lv7_0;
    c1_conv_layer2_b_address1 <= ap_const_lv7_0;
    c1_conv_layer2_b_ce0 <= ap_const_logic_0;
    c1_conv_layer2_b_ce1 <= ap_const_logic_0;
    c1_conv_layer2_b_d0 <= ap_const_lv64_0;
    c1_conv_layer2_b_d1 <= ap_const_lv64_0;
    c1_conv_layer2_b_we0 <= ap_const_logic_0;
    c1_conv_layer2_b_we1 <= ap_const_logic_0;
    c1_conv_layer2_dW_address0 <= ap_const_lv16_0;
    c1_conv_layer2_dW_address1 <= ap_const_lv16_0;
    c1_conv_layer2_dW_ce0 <= ap_const_logic_0;
    c1_conv_layer2_dW_ce1 <= ap_const_logic_0;
    c1_conv_layer2_dW_d0 <= ap_const_lv64_0;
    c1_conv_layer2_dW_d1 <= ap_const_lv64_0;
    c1_conv_layer2_dW_we0 <= ap_const_logic_0;
    c1_conv_layer2_dW_we1 <= ap_const_logic_0;

    c1_conv_layer2_data_address0_assign_proc : process(grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_address0, ap_CS_fsm_state8, zext_ln203_fu_466_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c1_conv_layer2_data_address0 <= grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_address0;
        else 
            c1_conv_layer2_data_address0 <= zext_ln203_fu_466_p1(17 - 1 downto 0);
        end if; 
    end process;

    c1_conv_layer2_data_address1 <= grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_address1;

    c1_conv_layer2_data_ce0_assign_proc : process(grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_ce0, ap_CS_fsm_state8, c1_conv_layer2_data_ce0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c1_conv_layer2_data_ce0 <= grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_ce0;
        else 
            c1_conv_layer2_data_ce0 <= c1_conv_layer2_data_ce0_local;
        end if; 
    end process;


    c1_conv_layer2_data_ce0_local_assign_proc : process(ap_ce, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce))) then 
            c1_conv_layer2_data_ce0_local <= ap_const_logic_1;
        else 
            c1_conv_layer2_data_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    c1_conv_layer2_data_ce1_assign_proc : process(grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c1_conv_layer2_data_ce1 <= grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_ce1;
        else 
            c1_conv_layer2_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    c1_conv_layer2_db_address0 <= ap_const_lv7_0;
    c1_conv_layer2_db_address1 <= ap_const_lv7_0;
    c1_conv_layer2_db_ce0 <= ap_const_logic_0;
    c1_conv_layer2_db_ce1 <= ap_const_logic_0;
    c1_conv_layer2_db_d0 <= ap_const_lv64_0;
    c1_conv_layer2_db_d1 <= ap_const_lv64_0;
    c1_conv_layer2_db_we0 <= ap_const_logic_0;
    c1_conv_layer2_db_we1 <= ap_const_logic_0;
    c1_conv_layer2_error_address0 <= ap_const_lv17_0;
    c1_conv_layer2_error_address1 <= ap_const_lv17_0;
    c1_conv_layer2_error_ce0 <= ap_const_logic_0;
    c1_conv_layer2_error_ce1 <= ap_const_logic_0;
    c1_conv_layer2_error_d0 <= ap_const_lv64_0;
    c1_conv_layer2_error_d1 <= ap_const_lv64_0;
    c1_conv_layer2_error_we0 <= ap_const_logic_0;
    c1_conv_layer2_error_we1 <= ap_const_logic_0;
    c1_conv_layer2_map_common_address0 <= ap_const_lv10_0;
    c1_conv_layer2_map_common_address1 <= ap_const_lv10_0;
    c1_conv_layer2_map_common_ce0 <= ap_const_logic_0;
    c1_conv_layer2_map_common_ce1 <= ap_const_logic_0;
    c1_conv_layer2_map_common_d0 <= ap_const_lv64_0;
    c1_conv_layer2_map_common_d1 <= ap_const_lv64_0;
    c1_conv_layer2_map_common_we0 <= ap_const_logic_0;
    c1_conv_layer2_map_common_we1 <= ap_const_logic_0;
    empty_16_fu_356_p0 <= i_reg_186(17 - 1 downto 0);
    empty_fu_351_p0 <= i_reg_186(16 - 1 downto 0);

    grp_fu_259_ce_assign_proc : process(ap_ce, ap_CS_fsm_state46, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state46)))) then 
            grp_fu_259_ce <= ap_const_logic_1;
        else 
            grp_fu_259_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_263_ce_assign_proc : process(ap_ce, ap_CS_fsm_state46, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state46)))) then 
            grp_fu_263_ce <= ap_const_logic_1;
        else 
            grp_fu_263_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_267_ce_assign_proc : process(ap_ce, ap_CS_fsm_state77, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) 
    or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state77)))) then 
            grp_fu_267_ce <= ap_const_logic_1;
        else 
            grp_fu_267_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_271_ce_assign_proc : process(ap_ce, ap_CS_fsm_state9, ap_CS_fsm_state38, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) 
    or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state37)))) then 
            grp_fu_271_ce <= ap_const_logic_1;
        else 
            grp_fu_271_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_276_ce_assign_proc : process(ap_ce, ap_CS_fsm_state9, ap_CS_fsm_state38, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) 
    or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state37)))) then 
            grp_fu_276_ce <= ap_const_logic_1;
        else 
            grp_fu_276_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_276_p1 <= xor_ln_fu_524_p3;

    grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_ce_assign_proc : process(ap_ce, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_ce <= ap_const_logic_1;
        else 
            grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start <= grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start_reg;
    icmp_ln197_fu_305_p2 <= "1" when (signed(zext_ln197_fu_301_p1) < signed(s2_pooling_layer1_map_count_read_reg_568)) else "0";
    icmp_ln199_fu_332_p2 <= "1" when (signed(zext_ln199_fu_328_p1) < signed(map_h_reg_563)) else "0";
    icmp_ln201_fu_401_p2 <= "1" when (signed(zext_ln201_fu_397_p1) < signed(map_w_reg_558)) else "0";
    icmp_ln204_fu_361_p2 <= "0" when (indvars_iv19_reg_209 = indvars_iv24_reg_197) else "1";
    indvars_iv_next31_fu_406_p2 <= std_logic_vector(unsigned(j_reg_221) + unsigned(ap_const_lv31_1));
    indvars_iv_next39_fu_337_p2 <= std_logic_vector(unsigned(i_reg_186) + unsigned(ap_const_lv31_1));
    m_1_fu_489_p3 <= (tmp_8_fu_479_p4 & ap_const_lv1_1);
    max_value_fu_475_p1 <= c1_conv_layer2_data_load_reg_664;
    or_ln_fu_377_p3 <= (tmp_7_fu_367_p4 & ap_const_lv1_1);
    s2_pooling_layer2_W_address0 <= ap_const_lv16_0;
    s2_pooling_layer2_W_address1 <= ap_const_lv16_0;
    s2_pooling_layer2_W_ce0 <= ap_const_logic_0;
    s2_pooling_layer2_W_ce1 <= ap_const_logic_0;
    s2_pooling_layer2_W_d0 <= ap_const_lv64_0;
    s2_pooling_layer2_W_d1 <= ap_const_lv64_0;
    s2_pooling_layer2_W_we0 <= ap_const_logic_0;
    s2_pooling_layer2_W_we1 <= ap_const_logic_0;
    s2_pooling_layer2_b_address0 <= ap_const_lv7_0;
    s2_pooling_layer2_b_address1 <= ap_const_lv7_0;
    s2_pooling_layer2_b_ce0 <= ap_const_logic_0;
    s2_pooling_layer2_b_ce1 <= ap_const_logic_0;
    s2_pooling_layer2_b_d0 <= ap_const_lv64_0;
    s2_pooling_layer2_b_d1 <= ap_const_lv64_0;
    s2_pooling_layer2_b_we0 <= ap_const_logic_0;
    s2_pooling_layer2_b_we1 <= ap_const_logic_0;
    s2_pooling_layer2_dW_address0 <= ap_const_lv16_0;
    s2_pooling_layer2_dW_address1 <= ap_const_lv16_0;
    s2_pooling_layer2_dW_ce0 <= ap_const_logic_0;
    s2_pooling_layer2_dW_ce1 <= ap_const_logic_0;
    s2_pooling_layer2_dW_d0 <= ap_const_lv64_0;
    s2_pooling_layer2_dW_d1 <= ap_const_lv64_0;
    s2_pooling_layer2_dW_we0 <= ap_const_logic_0;
    s2_pooling_layer2_dW_we1 <= ap_const_logic_0;
    s2_pooling_layer2_data_address0 <= zext_ln212_fu_537_p1(17 - 1 downto 0);
    s2_pooling_layer2_data_ce0 <= s2_pooling_layer2_data_ce0_local;

    s2_pooling_layer2_data_ce0_local_assign_proc : process(ap_ce, ap_CS_fsm_state78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) and (ap_const_logic_1 = ap_ce))) then 
            s2_pooling_layer2_data_ce0_local <= ap_const_logic_1;
        else 
            s2_pooling_layer2_data_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    s2_pooling_layer2_data_d0 <= bitcast_ln212_fu_541_p1;
    s2_pooling_layer2_data_we0 <= s2_pooling_layer2_data_we0_local;

    s2_pooling_layer2_data_we0_local_assign_proc : process(ap_ce, ap_CS_fsm_state78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) and (ap_const_logic_1 = ap_ce))) then 
            s2_pooling_layer2_data_we0_local <= ap_const_logic_1;
        else 
            s2_pooling_layer2_data_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s2_pooling_layer2_db_address0 <= ap_const_lv7_0;
    s2_pooling_layer2_db_address1 <= ap_const_lv7_0;
    s2_pooling_layer2_db_ce0 <= ap_const_logic_0;
    s2_pooling_layer2_db_ce1 <= ap_const_logic_0;
    s2_pooling_layer2_db_d0 <= ap_const_lv64_0;
    s2_pooling_layer2_db_d1 <= ap_const_lv64_0;
    s2_pooling_layer2_db_we0 <= ap_const_logic_0;
    s2_pooling_layer2_db_we1 <= ap_const_logic_0;
    s2_pooling_layer2_error_address0 <= ap_const_lv17_0;
    s2_pooling_layer2_error_address1 <= ap_const_lv17_0;
    s2_pooling_layer2_error_ce0 <= ap_const_logic_0;
    s2_pooling_layer2_error_ce1 <= ap_const_logic_0;
    s2_pooling_layer2_error_d0 <= ap_const_lv64_0;
    s2_pooling_layer2_error_d1 <= ap_const_lv64_0;
    s2_pooling_layer2_error_we0 <= ap_const_logic_0;
    s2_pooling_layer2_error_we1 <= ap_const_logic_0;
    s2_pooling_layer2_map_common_address0 <= ap_const_lv10_0;
    s2_pooling_layer2_map_common_address1 <= ap_const_lv10_0;
    s2_pooling_layer2_map_common_ce0 <= ap_const_logic_0;
    s2_pooling_layer2_map_common_ce1 <= ap_const_logic_0;
    s2_pooling_layer2_map_common_d0 <= ap_const_lv64_0;
    s2_pooling_layer2_map_common_d1 <= ap_const_lv64_0;
    s2_pooling_layer2_map_common_we0 <= ap_const_logic_0;
    s2_pooling_layer2_map_common_we1 <= ap_const_logic_0;
    select_ln204_fu_385_p3 <= 
        indvars_iv24_reg_197 when (icmp_ln204_fu_361_p2(0) = '1') else 
        or_ln_fu_377_p3;
    shl_ln_fu_425_p3 <= (add_ln203_fu_420_p2 & ap_const_lv1_0);
    tmp_6_fu_320_p3 <= (trunc_ln197_3_fu_316_p1 & ap_const_lv10_0);
    tmp_7_fu_367_p4 <= indvars_iv19_reg_209(31 downto 1);
    tmp_8_fu_479_p4 <= m_reg_232(16 downto 1);
    trunc_ln11_fu_520_p1 <= bitcast_ln11_fu_502_p1(63 - 1 downto 0);
    trunc_ln197_1_fu_285_p1 <= c1_conv_layer1_map_w(16 - 1 downto 0);
    trunc_ln197_2_fu_289_p1 <= s2_pooling_layer1_map_w(17 - 1 downto 0);
    trunc_ln197_3_fu_316_p1 <= k_fu_128(7 - 1 downto 0);
    trunc_ln197_fu_281_p1 <= c1_conv_layer1_map_w(17 - 1 downto 0);
    trunc_ln201_1_fu_470_p1 <= m_reg_232(17 - 1 downto 0);
    trunc_ln201_2_fu_416_p1 <= j_reg_221(16 - 1 downto 0);
    trunc_ln201_fu_412_p1 <= j_reg_221(17 - 1 downto 0);
    xor_ln11_fu_514_p2 <= (bit_sel_fu_506_p3 xor ap_const_lv1_1);
    xor_ln_fu_524_p3 <= (xor_ln11_fu_514_p2 & trunc_ln11_fu_520_p1);
    zext_ln197_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_128),32));
    zext_ln199_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_186),32));
    zext_ln201_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_221),32));
    zext_ln203_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_1_reg_634),64));
    zext_ln212_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln212_1_reg_639),64));
end behav;
