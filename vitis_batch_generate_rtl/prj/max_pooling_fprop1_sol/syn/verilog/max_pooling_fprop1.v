// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pooling_fprop1_max_pooling_fprop1,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu19p-fsvb3824-2-e,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.983000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5908,HLS_SYN_LUT=6845,HLS_VERSION=2024_2}" *)

module max_pooling_fprop1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_core,
        ap_part,
        ap_parent,
        c1_conv_layer1_map_w,
        c1_conv_layer1_map_h,
        c1_conv_layer1_map_count,
        c1_conv_layer1_kernel_w,
        c1_conv_layer1_kernel_h,
        c1_conv_layer1_kernel_count,
        c1_conv_layer2_data_address0,
        c1_conv_layer2_data_ce0,
        c1_conv_layer2_data_q0,
        c1_conv_layer2_data_address1,
        c1_conv_layer2_data_ce1,
        c1_conv_layer2_data_q1,
        c1_conv_layer2_error_address0,
        c1_conv_layer2_error_ce0,
        c1_conv_layer2_error_we0,
        c1_conv_layer2_error_d0,
        c1_conv_layer2_error_q0,
        c1_conv_layer2_error_address1,
        c1_conv_layer2_error_ce1,
        c1_conv_layer2_error_we1,
        c1_conv_layer2_error_d1,
        c1_conv_layer2_error_q1,
        c1_conv_layer2_b_address0,
        c1_conv_layer2_b_ce0,
        c1_conv_layer2_b_we0,
        c1_conv_layer2_b_d0,
        c1_conv_layer2_b_q0,
        c1_conv_layer2_b_address1,
        c1_conv_layer2_b_ce1,
        c1_conv_layer2_b_we1,
        c1_conv_layer2_b_d1,
        c1_conv_layer2_b_q1,
        c1_conv_layer2_db_address0,
        c1_conv_layer2_db_ce0,
        c1_conv_layer2_db_we0,
        c1_conv_layer2_db_d0,
        c1_conv_layer2_db_q0,
        c1_conv_layer2_db_address1,
        c1_conv_layer2_db_ce1,
        c1_conv_layer2_db_we1,
        c1_conv_layer2_db_d1,
        c1_conv_layer2_db_q1,
        c1_conv_layer2_W_address0,
        c1_conv_layer2_W_ce0,
        c1_conv_layer2_W_we0,
        c1_conv_layer2_W_d0,
        c1_conv_layer2_W_q0,
        c1_conv_layer2_W_address1,
        c1_conv_layer2_W_ce1,
        c1_conv_layer2_W_we1,
        c1_conv_layer2_W_d1,
        c1_conv_layer2_W_q1,
        c1_conv_layer2_dW_address0,
        c1_conv_layer2_dW_ce0,
        c1_conv_layer2_dW_we0,
        c1_conv_layer2_dW_d0,
        c1_conv_layer2_dW_q0,
        c1_conv_layer2_dW_address1,
        c1_conv_layer2_dW_ce1,
        c1_conv_layer2_dW_we1,
        c1_conv_layer2_dW_d1,
        c1_conv_layer2_dW_q1,
        c1_conv_layer2_map_common_address0,
        c1_conv_layer2_map_common_ce0,
        c1_conv_layer2_map_common_we0,
        c1_conv_layer2_map_common_d0,
        c1_conv_layer2_map_common_q0,
        c1_conv_layer2_map_common_address1,
        c1_conv_layer2_map_common_ce1,
        c1_conv_layer2_map_common_we1,
        c1_conv_layer2_map_common_d1,
        c1_conv_layer2_map_common_q1,
        s2_pooling_layer1_map_w,
        s2_pooling_layer1_map_h,
        s2_pooling_layer1_map_count,
        s2_pooling_layer1_kernel_w,
        s2_pooling_layer1_kernel_h,
        s2_pooling_layer1_kernel_count,
        s2_pooling_layer2_data_address0,
        s2_pooling_layer2_data_ce0,
        s2_pooling_layer2_data_we0,
        s2_pooling_layer2_data_d0,
        s2_pooling_layer2_error_address0,
        s2_pooling_layer2_error_ce0,
        s2_pooling_layer2_error_we0,
        s2_pooling_layer2_error_d0,
        s2_pooling_layer2_error_q0,
        s2_pooling_layer2_error_address1,
        s2_pooling_layer2_error_ce1,
        s2_pooling_layer2_error_we1,
        s2_pooling_layer2_error_d1,
        s2_pooling_layer2_error_q1,
        s2_pooling_layer2_b_address0,
        s2_pooling_layer2_b_ce0,
        s2_pooling_layer2_b_we0,
        s2_pooling_layer2_b_d0,
        s2_pooling_layer2_b_q0,
        s2_pooling_layer2_b_address1,
        s2_pooling_layer2_b_ce1,
        s2_pooling_layer2_b_we1,
        s2_pooling_layer2_b_d1,
        s2_pooling_layer2_b_q1,
        s2_pooling_layer2_db_address0,
        s2_pooling_layer2_db_ce0,
        s2_pooling_layer2_db_we0,
        s2_pooling_layer2_db_d0,
        s2_pooling_layer2_db_q0,
        s2_pooling_layer2_db_address1,
        s2_pooling_layer2_db_ce1,
        s2_pooling_layer2_db_we1,
        s2_pooling_layer2_db_d1,
        s2_pooling_layer2_db_q1,
        s2_pooling_layer2_W_address0,
        s2_pooling_layer2_W_ce0,
        s2_pooling_layer2_W_we0,
        s2_pooling_layer2_W_d0,
        s2_pooling_layer2_W_q0,
        s2_pooling_layer2_W_address1,
        s2_pooling_layer2_W_ce1,
        s2_pooling_layer2_W_we1,
        s2_pooling_layer2_W_d1,
        s2_pooling_layer2_W_q1,
        s2_pooling_layer2_dW_address0,
        s2_pooling_layer2_dW_ce0,
        s2_pooling_layer2_dW_we0,
        s2_pooling_layer2_dW_d0,
        s2_pooling_layer2_dW_q0,
        s2_pooling_layer2_dW_address1,
        s2_pooling_layer2_dW_ce1,
        s2_pooling_layer2_dW_we1,
        s2_pooling_layer2_dW_d1,
        s2_pooling_layer2_dW_q1,
        s2_pooling_layer2_map_common_address0,
        s2_pooling_layer2_map_common_ce0,
        s2_pooling_layer2_map_common_we0,
        s2_pooling_layer2_map_common_d0,
        s2_pooling_layer2_map_common_q0,
        s2_pooling_layer2_map_common_address1,
        s2_pooling_layer2_map_common_ce1,
        s2_pooling_layer2_map_common_we1,
        s2_pooling_layer2_map_common_d1,
        s2_pooling_layer2_map_common_q1,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 78'd1;
parameter    ap_ST_fsm_state2 = 78'd2;
parameter    ap_ST_fsm_state3 = 78'd4;
parameter    ap_ST_fsm_state4 = 78'd8;
parameter    ap_ST_fsm_state5 = 78'd16;
parameter    ap_ST_fsm_state6 = 78'd32;
parameter    ap_ST_fsm_state7 = 78'd64;
parameter    ap_ST_fsm_state8 = 78'd128;
parameter    ap_ST_fsm_state9 = 78'd256;
parameter    ap_ST_fsm_state10 = 78'd512;
parameter    ap_ST_fsm_state11 = 78'd1024;
parameter    ap_ST_fsm_state12 = 78'd2048;
parameter    ap_ST_fsm_state13 = 78'd4096;
parameter    ap_ST_fsm_state14 = 78'd8192;
parameter    ap_ST_fsm_state15 = 78'd16384;
parameter    ap_ST_fsm_state16 = 78'd32768;
parameter    ap_ST_fsm_state17 = 78'd65536;
parameter    ap_ST_fsm_state18 = 78'd131072;
parameter    ap_ST_fsm_state19 = 78'd262144;
parameter    ap_ST_fsm_state20 = 78'd524288;
parameter    ap_ST_fsm_state21 = 78'd1048576;
parameter    ap_ST_fsm_state22 = 78'd2097152;
parameter    ap_ST_fsm_state23 = 78'd4194304;
parameter    ap_ST_fsm_state24 = 78'd8388608;
parameter    ap_ST_fsm_state25 = 78'd16777216;
parameter    ap_ST_fsm_state26 = 78'd33554432;
parameter    ap_ST_fsm_state27 = 78'd67108864;
parameter    ap_ST_fsm_state28 = 78'd134217728;
parameter    ap_ST_fsm_state29 = 78'd268435456;
parameter    ap_ST_fsm_state30 = 78'd536870912;
parameter    ap_ST_fsm_state31 = 78'd1073741824;
parameter    ap_ST_fsm_state32 = 78'd2147483648;
parameter    ap_ST_fsm_state33 = 78'd4294967296;
parameter    ap_ST_fsm_state34 = 78'd8589934592;
parameter    ap_ST_fsm_state35 = 78'd17179869184;
parameter    ap_ST_fsm_state36 = 78'd34359738368;
parameter    ap_ST_fsm_state37 = 78'd68719476736;
parameter    ap_ST_fsm_state38 = 78'd137438953472;
parameter    ap_ST_fsm_state39 = 78'd274877906944;
parameter    ap_ST_fsm_state40 = 78'd549755813888;
parameter    ap_ST_fsm_state41 = 78'd1099511627776;
parameter    ap_ST_fsm_state42 = 78'd2199023255552;
parameter    ap_ST_fsm_state43 = 78'd4398046511104;
parameter    ap_ST_fsm_state44 = 78'd8796093022208;
parameter    ap_ST_fsm_state45 = 78'd17592186044416;
parameter    ap_ST_fsm_state46 = 78'd35184372088832;
parameter    ap_ST_fsm_state47 = 78'd70368744177664;
parameter    ap_ST_fsm_state48 = 78'd140737488355328;
parameter    ap_ST_fsm_state49 = 78'd281474976710656;
parameter    ap_ST_fsm_state50 = 78'd562949953421312;
parameter    ap_ST_fsm_state51 = 78'd1125899906842624;
parameter    ap_ST_fsm_state52 = 78'd2251799813685248;
parameter    ap_ST_fsm_state53 = 78'd4503599627370496;
parameter    ap_ST_fsm_state54 = 78'd9007199254740992;
parameter    ap_ST_fsm_state55 = 78'd18014398509481984;
parameter    ap_ST_fsm_state56 = 78'd36028797018963968;
parameter    ap_ST_fsm_state57 = 78'd72057594037927936;
parameter    ap_ST_fsm_state58 = 78'd144115188075855872;
parameter    ap_ST_fsm_state59 = 78'd288230376151711744;
parameter    ap_ST_fsm_state60 = 78'd576460752303423488;
parameter    ap_ST_fsm_state61 = 78'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 78'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 78'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 78'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 78'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 78'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 78'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 78'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 78'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 78'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 78'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 78'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 78'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 78'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 78'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 78'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 78'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 78'd151115727451828646838272;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] ap_core;
input  [7:0] ap_part;
input  [7:0] ap_parent;
input  [31:0] c1_conv_layer1_map_w;
input  [31:0] c1_conv_layer1_map_h;
input  [31:0] c1_conv_layer1_map_count;
input  [31:0] c1_conv_layer1_kernel_w;
input  [31:0] c1_conv_layer1_kernel_h;
input  [31:0] c1_conv_layer1_kernel_count;
output  [16:0] c1_conv_layer2_data_address0;
output   c1_conv_layer2_data_ce0;
input  [63:0] c1_conv_layer2_data_q0;
output  [16:0] c1_conv_layer2_data_address1;
output   c1_conv_layer2_data_ce1;
input  [63:0] c1_conv_layer2_data_q1;
output  [16:0] c1_conv_layer2_error_address0;
output   c1_conv_layer2_error_ce0;
output   c1_conv_layer2_error_we0;
output  [63:0] c1_conv_layer2_error_d0;
input  [63:0] c1_conv_layer2_error_q0;
output  [16:0] c1_conv_layer2_error_address1;
output   c1_conv_layer2_error_ce1;
output   c1_conv_layer2_error_we1;
output  [63:0] c1_conv_layer2_error_d1;
input  [63:0] c1_conv_layer2_error_q1;
output  [6:0] c1_conv_layer2_b_address0;
output   c1_conv_layer2_b_ce0;
output   c1_conv_layer2_b_we0;
output  [63:0] c1_conv_layer2_b_d0;
input  [63:0] c1_conv_layer2_b_q0;
output  [6:0] c1_conv_layer2_b_address1;
output   c1_conv_layer2_b_ce1;
output   c1_conv_layer2_b_we1;
output  [63:0] c1_conv_layer2_b_d1;
input  [63:0] c1_conv_layer2_b_q1;
output  [6:0] c1_conv_layer2_db_address0;
output   c1_conv_layer2_db_ce0;
output   c1_conv_layer2_db_we0;
output  [63:0] c1_conv_layer2_db_d0;
input  [63:0] c1_conv_layer2_db_q0;
output  [6:0] c1_conv_layer2_db_address1;
output   c1_conv_layer2_db_ce1;
output   c1_conv_layer2_db_we1;
output  [63:0] c1_conv_layer2_db_d1;
input  [63:0] c1_conv_layer2_db_q1;
output  [15:0] c1_conv_layer2_W_address0;
output   c1_conv_layer2_W_ce0;
output   c1_conv_layer2_W_we0;
output  [63:0] c1_conv_layer2_W_d0;
input  [63:0] c1_conv_layer2_W_q0;
output  [15:0] c1_conv_layer2_W_address1;
output   c1_conv_layer2_W_ce1;
output   c1_conv_layer2_W_we1;
output  [63:0] c1_conv_layer2_W_d1;
input  [63:0] c1_conv_layer2_W_q1;
output  [15:0] c1_conv_layer2_dW_address0;
output   c1_conv_layer2_dW_ce0;
output   c1_conv_layer2_dW_we0;
output  [63:0] c1_conv_layer2_dW_d0;
input  [63:0] c1_conv_layer2_dW_q0;
output  [15:0] c1_conv_layer2_dW_address1;
output   c1_conv_layer2_dW_ce1;
output   c1_conv_layer2_dW_we1;
output  [63:0] c1_conv_layer2_dW_d1;
input  [63:0] c1_conv_layer2_dW_q1;
output  [9:0] c1_conv_layer2_map_common_address0;
output   c1_conv_layer2_map_common_ce0;
output   c1_conv_layer2_map_common_we0;
output  [63:0] c1_conv_layer2_map_common_d0;
input  [63:0] c1_conv_layer2_map_common_q0;
output  [9:0] c1_conv_layer2_map_common_address1;
output   c1_conv_layer2_map_common_ce1;
output   c1_conv_layer2_map_common_we1;
output  [63:0] c1_conv_layer2_map_common_d1;
input  [63:0] c1_conv_layer2_map_common_q1;
input  [31:0] s2_pooling_layer1_map_w;
input  [31:0] s2_pooling_layer1_map_h;
input  [31:0] s2_pooling_layer1_map_count;
input  [31:0] s2_pooling_layer1_kernel_w;
input  [31:0] s2_pooling_layer1_kernel_h;
input  [31:0] s2_pooling_layer1_kernel_count;
output  [16:0] s2_pooling_layer2_data_address0;
output   s2_pooling_layer2_data_ce0;
output   s2_pooling_layer2_data_we0;
output  [63:0] s2_pooling_layer2_data_d0;
output  [16:0] s2_pooling_layer2_error_address0;
output   s2_pooling_layer2_error_ce0;
output   s2_pooling_layer2_error_we0;
output  [63:0] s2_pooling_layer2_error_d0;
input  [63:0] s2_pooling_layer2_error_q0;
output  [16:0] s2_pooling_layer2_error_address1;
output   s2_pooling_layer2_error_ce1;
output   s2_pooling_layer2_error_we1;
output  [63:0] s2_pooling_layer2_error_d1;
input  [63:0] s2_pooling_layer2_error_q1;
output  [6:0] s2_pooling_layer2_b_address0;
output   s2_pooling_layer2_b_ce0;
output   s2_pooling_layer2_b_we0;
output  [63:0] s2_pooling_layer2_b_d0;
input  [63:0] s2_pooling_layer2_b_q0;
output  [6:0] s2_pooling_layer2_b_address1;
output   s2_pooling_layer2_b_ce1;
output   s2_pooling_layer2_b_we1;
output  [63:0] s2_pooling_layer2_b_d1;
input  [63:0] s2_pooling_layer2_b_q1;
output  [6:0] s2_pooling_layer2_db_address0;
output   s2_pooling_layer2_db_ce0;
output   s2_pooling_layer2_db_we0;
output  [63:0] s2_pooling_layer2_db_d0;
input  [63:0] s2_pooling_layer2_db_q0;
output  [6:0] s2_pooling_layer2_db_address1;
output   s2_pooling_layer2_db_ce1;
output   s2_pooling_layer2_db_we1;
output  [63:0] s2_pooling_layer2_db_d1;
input  [63:0] s2_pooling_layer2_db_q1;
output  [15:0] s2_pooling_layer2_W_address0;
output   s2_pooling_layer2_W_ce0;
output   s2_pooling_layer2_W_we0;
output  [63:0] s2_pooling_layer2_W_d0;
input  [63:0] s2_pooling_layer2_W_q0;
output  [15:0] s2_pooling_layer2_W_address1;
output   s2_pooling_layer2_W_ce1;
output   s2_pooling_layer2_W_we1;
output  [63:0] s2_pooling_layer2_W_d1;
input  [63:0] s2_pooling_layer2_W_q1;
output  [15:0] s2_pooling_layer2_dW_address0;
output   s2_pooling_layer2_dW_ce0;
output   s2_pooling_layer2_dW_we0;
output  [63:0] s2_pooling_layer2_dW_d0;
input  [63:0] s2_pooling_layer2_dW_q0;
output  [15:0] s2_pooling_layer2_dW_address1;
output   s2_pooling_layer2_dW_ce1;
output   s2_pooling_layer2_dW_we1;
output  [63:0] s2_pooling_layer2_dW_d1;
input  [63:0] s2_pooling_layer2_dW_q1;
output  [9:0] s2_pooling_layer2_map_common_address0;
output   s2_pooling_layer2_map_common_ce0;
output   s2_pooling_layer2_map_common_we0;
output  [63:0] s2_pooling_layer2_map_common_d0;
input  [63:0] s2_pooling_layer2_map_common_q0;
output  [9:0] s2_pooling_layer2_map_common_address1;
output   s2_pooling_layer2_map_common_ce1;
output   s2_pooling_layer2_map_common_we1;
output  [63:0] s2_pooling_layer2_map_common_d1;
input  [63:0] s2_pooling_layer2_map_common_q1;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[16:0] c1_conv_layer2_data_address0;
reg c1_conv_layer2_data_ce0;
reg c1_conv_layer2_data_ce1;

(* fsm_encoding = "none" *) reg   [77:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] map_w_reg_558;
reg   [31:0] map_h_reg_563;
reg   [31:0] s2_pooling_layer1_map_count_read_reg_568;
wire   [16:0] trunc_ln197_fu_281_p1;
reg   [16:0] trunc_ln197_reg_573;
wire  signed [15:0] trunc_ln197_1_fu_285_p1;
reg  signed [15:0] trunc_ln197_1_reg_578;
wire  signed [16:0] trunc_ln197_2_fu_289_p1;
reg  signed [16:0] trunc_ln197_2_reg_583;
wire   [30:0] add_ln197_fu_310_p2;
reg   [30:0] add_ln197_reg_591;
wire    ap_CS_fsm_state2;
wire   [16:0] tmp_6_fu_320_p3;
reg   [16:0] tmp_6_reg_596;
wire   [30:0] indvars_iv_next39_fu_337_p2;
reg   [30:0] indvars_iv_next39_reg_606;
wire    ap_CS_fsm_state3;
wire   [15:0] empty_fu_351_p2;
reg   [15:0] empty_reg_611;
wire   [16:0] empty_16_fu_356_p2;
reg   [16:0] empty_16_reg_616;
wire   [31:0] select_ln204_fu_385_p3;
reg   [31:0] select_ln204_reg_621;
wire   [30:0] indvars_iv_next31_fu_406_p2;
reg   [30:0] indvars_iv_next31_reg_629;
wire    ap_CS_fsm_state4;
wire   [16:0] add_ln203_1_fu_433_p2;
reg   [16:0] add_ln203_1_reg_634;
wire   [16:0] add_ln212_1_fu_443_p2;
reg   [16:0] add_ln212_1_reg_639;
wire   [31:0] add_ln201_fu_448_p2;
reg   [31:0] add_ln201_reg_644;
wire   [31:0] add_ln199_fu_454_p2;
wire   [31:0] add_ln199_1_fu_460_p2;
wire    ap_CS_fsm_state5;
reg   [63:0] c1_conv_layer2_data_load_reg_664;
wire    ap_CS_fsm_state6;
wire   [16:0] trunc_ln201_1_fu_470_p1;
reg   [16:0] trunc_ln201_1_reg_669;
wire    ap_CS_fsm_state7;
wire   [63:0] max_value_fu_475_p1;
reg   [63:0] max_value_reg_674;
wire   [16:0] m_1_fu_489_p3;
reg   [16:0] m_1_reg_679;
wire    ap_CS_fsm_state9;
wire   [63:0] grp_fu_271_p2;
reg   [63:0] ep_reg_692;
wire    ap_CS_fsm_state38;
wire   [63:0] grp_fu_276_p2;
reg   [63:0] em_reg_698;
wire   [63:0] grp_fu_259_p2;
reg   [63:0] sub1_i_reg_704;
wire    ap_CS_fsm_state46;
wire   [63:0] grp_fu_263_p2;
reg   [63:0] add_i_reg_709;
wire   [63:0] grp_fu_267_p2;
reg   [63:0] div_i_reg_714;
wire    ap_CS_fsm_state77;
wire    grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start;
wire    grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_done;
wire    grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_idle;
wire    grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_ready;
reg    grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_ce;
wire   [16:0] grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_address0;
wire    grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_ce0;
wire   [16:0] grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_address1;
wire    grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_ce1;
wire   [63:0] grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_max_value_1_out;
wire    grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_max_value_1_out_ap_vld;
wire    ap_CS_fsm_state8;
reg   [30:0] i_reg_186;
wire   [0:0] icmp_ln197_fu_305_p2;
wire   [0:0] icmp_ln201_fu_401_p2;
reg   [31:0] indvars_iv24_reg_197;
reg   [31:0] indvars_iv19_reg_209;
reg   [30:0] j_reg_221;
wire   [0:0] icmp_ln199_fu_332_p2;
wire    ap_CS_fsm_state78;
reg   [31:0] m_reg_232;
reg    grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start_reg;
wire   [63:0] zext_ln203_fu_466_p1;
wire   [63:0] zext_ln212_fu_537_p1;
reg   [30:0] k_fu_128;
reg    c1_conv_layer2_data_ce0_local;
reg    s2_pooling_layer2_data_we0_local;
wire   [63:0] bitcast_ln212_fu_541_p1;
reg    s2_pooling_layer2_data_ce0_local;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state47;
wire   [63:0] grp_fu_276_p1;
wire   [31:0] zext_ln197_fu_301_p1;
wire   [6:0] trunc_ln197_3_fu_316_p1;
wire   [31:0] zext_ln199_fu_328_p1;
wire  signed [15:0] empty_fu_351_p0;
wire  signed [16:0] empty_16_fu_356_p0;
wire   [30:0] tmp_7_fu_367_p4;
wire   [0:0] icmp_ln204_fu_361_p2;
wire   [31:0] or_ln_fu_377_p3;
wire   [31:0] zext_ln201_fu_397_p1;
wire   [15:0] trunc_ln201_2_fu_416_p1;
wire   [15:0] add_ln203_fu_420_p2;
wire   [16:0] shl_ln_fu_425_p3;
wire   [16:0] trunc_ln201_fu_412_p1;
wire   [16:0] add_ln212_fu_438_p2;
wire   [15:0] tmp_8_fu_479_p4;
wire   [63:0] bitcast_ln11_fu_502_p1;
wire   [0:0] bit_sel_fu_506_p3;
wire   [0:0] xor_ln11_fu_514_p2;
wire   [62:0] trunc_ln11_fu_520_p1;
wire   [63:0] xor_ln_fu_524_p3;
reg    grp_fu_259_ce;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
reg    grp_fu_263_ce;
reg    grp_fu_267_ce;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
reg    grp_fu_271_ce;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
reg    grp_fu_276_ce;
reg   [77:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
reg    ap_ST_fsm_state30_blk;
reg    ap_ST_fsm_state31_blk;
reg    ap_ST_fsm_state32_blk;
reg    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
reg    ap_ST_fsm_state36_blk;
reg    ap_ST_fsm_state37_blk;
reg    ap_ST_fsm_state38_blk;
reg    ap_ST_fsm_state39_blk;
reg    ap_ST_fsm_state40_blk;
reg    ap_ST_fsm_state41_blk;
reg    ap_ST_fsm_state42_blk;
reg    ap_ST_fsm_state43_blk;
reg    ap_ST_fsm_state44_blk;
reg    ap_ST_fsm_state45_blk;
reg    ap_ST_fsm_state46_blk;
reg    ap_ST_fsm_state47_blk;
reg    ap_ST_fsm_state48_blk;
reg    ap_ST_fsm_state49_blk;
reg    ap_ST_fsm_state50_blk;
reg    ap_ST_fsm_state51_blk;
reg    ap_ST_fsm_state52_blk;
reg    ap_ST_fsm_state53_blk;
reg    ap_ST_fsm_state54_blk;
reg    ap_ST_fsm_state55_blk;
reg    ap_ST_fsm_state56_blk;
reg    ap_ST_fsm_state57_blk;
reg    ap_ST_fsm_state58_blk;
reg    ap_ST_fsm_state59_blk;
reg    ap_ST_fsm_state60_blk;
reg    ap_ST_fsm_state61_blk;
reg    ap_ST_fsm_state62_blk;
reg    ap_ST_fsm_state63_blk;
reg    ap_ST_fsm_state64_blk;
reg    ap_ST_fsm_state65_blk;
reg    ap_ST_fsm_state66_blk;
reg    ap_ST_fsm_state67_blk;
reg    ap_ST_fsm_state68_blk;
reg    ap_ST_fsm_state69_blk;
reg    ap_ST_fsm_state70_blk;
reg    ap_ST_fsm_state71_blk;
reg    ap_ST_fsm_state72_blk;
reg    ap_ST_fsm_state73_blk;
reg    ap_ST_fsm_state74_blk;
reg    ap_ST_fsm_state75_blk;
reg    ap_ST_fsm_state76_blk;
reg    ap_ST_fsm_state77_blk;
reg    ap_ST_fsm_state78_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 78'd1;
#0 grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start_reg = 1'b0;
#0 k_fu_128 = 31'd0;
end

max_pooling_fprop1_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4 grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start),
    .ap_done(grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_done),
    .ap_idle(grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_idle),
    .ap_ready(grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_ready),
    .ap_ce(grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_ce),
    .indvars_iv19_cast(indvars_iv19_reg_209),
    .max_value(max_value_reg_674),
    .sext_ln201(select_ln204_reg_621),
    .empty_7(trunc_ln197_reg_573),
    .empty(trunc_ln201_1_reg_669),
    .zext_ln203(tmp_6_reg_596),
    .c1_conv_layer2_data_address0(grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_address0),
    .c1_conv_layer2_data_ce0(grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_ce0),
    .c1_conv_layer2_data_q0(c1_conv_layer2_data_q0),
    .c1_conv_layer2_data_address1(grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_address1),
    .c1_conv_layer2_data_ce1(grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_ce1),
    .c1_conv_layer2_data_q1(c1_conv_layer2_data_q1),
    .m_1(m_1_reg_679),
    .max_value_1_out(grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_max_value_1_out),
    .max_value_1_out_ap_vld(grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_max_value_1_out_ap_vld)
);

max_pooling_fprop1_dsub_64ns_64ns_64_8_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_8_full_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ep_reg_692),
    .din1(em_reg_698),
    .ce(grp_fu_259_ce),
    .dout(grp_fu_259_p2)
);

max_pooling_fprop1_dadd_64ns_64ns_64_8_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_8_full_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ep_reg_692),
    .din1(em_reg_698),
    .ce(grp_fu_263_ce),
    .dout(grp_fu_263_p2)
);

max_pooling_fprop1_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub1_i_reg_704),
    .din1(add_i_reg_709),
    .ce(grp_fu_267_ce),
    .dout(grp_fu_267_p2)
);

max_pooling_fprop1_dexp_64ns_64ns_64_30_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dexp_64ns_64ns_64_30_full_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_max_value_1_out),
    .ce(grp_fu_271_ce),
    .dout(grp_fu_271_p2)
);

max_pooling_fprop1_dexp_64ns_64ns_64_30_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dexp_64ns_64ns_64_30_full_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(grp_fu_276_p1),
    .ce(grp_fu_276_ce),
    .dout(grp_fu_276_p2)
);

max_pooling_fprop1_mul_16s_16s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_16s_16s_16_1_1_U19(
    .din0(empty_fu_351_p0),
    .din1(trunc_ln197_1_reg_578),
    .dout(empty_fu_351_p2)
);

max_pooling_fprop1_mul_17s_17s_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mul_17s_17s_17_1_1_U20(
    .din0(empty_16_fu_356_p0),
    .din1(trunc_ln197_2_reg_583),
    .dout(empty_16_fu_356_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        if ((1'b1 == ap_ce)) begin
            ap_CS_fsm <= ap_NS_fsm;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce))) begin
            grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start_reg <= 1'b1;
        end else if ((grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_ready == 1'b1)) begin
            grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if (((icmp_ln201_fu_401_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            i_reg_186 <= indvars_iv_next39_reg_606;
        end else if (((icmp_ln197_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            i_reg_186 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if (((icmp_ln201_fu_401_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            indvars_iv19_reg_209 <= add_ln199_fu_454_p2;
        end else if (((icmp_ln197_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            indvars_iv19_reg_209 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if (((icmp_ln201_fu_401_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            indvars_iv24_reg_197 <= add_ln199_1_fu_460_p2;
        end else if (((icmp_ln197_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            indvars_iv24_reg_197 <= 32'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if ((1'b1 == ap_CS_fsm_state78)) begin
            j_reg_221 <= indvars_iv_next31_reg_629;
        end else if (((icmp_ln199_fu_332_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            j_reg_221 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            k_fu_128 <= 31'd0;
        end else if (((icmp_ln199_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            k_fu_128 <= add_ln197_reg_591;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if ((1'b1 == ap_CS_fsm_state78)) begin
            m_reg_232 <= add_ln201_reg_644;
        end else if (((icmp_ln199_fu_332_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            m_reg_232 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        add_i_reg_709 <= grp_fu_263_p2;
        sub1_i_reg_704 <= grp_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln197_reg_591 <= add_ln197_fu_310_p2;
        tmp_6_reg_596[16 : 10] <= tmp_6_fu_320_p3[16 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce))) begin
        add_ln201_reg_644 <= add_ln201_fu_448_p2;
        indvars_iv_next31_reg_629 <= indvars_iv_next31_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln203_1_reg_634[16 : 1] <= add_ln203_1_fu_433_p2[16 : 1];
        add_ln212_1_reg_639 <= add_ln212_1_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c1_conv_layer2_data_load_reg_664 <= c1_conv_layer2_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        div_i_reg_714 <= grp_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        em_reg_698 <= grp_fu_276_p2;
        ep_reg_692 <= grp_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_16_reg_616 <= empty_16_fu_356_p2;
        empty_reg_611 <= empty_fu_351_p2;
        select_ln204_reg_621 <= select_ln204_fu_385_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce))) begin
        indvars_iv_next39_reg_606 <= indvars_iv_next39_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        m_1_reg_679[16 : 1] <= m_1_fu_489_p3[16 : 1];
        max_value_reg_674 <= max_value_fu_475_p1;
        trunc_ln201_1_reg_669 <= trunc_ln201_1_fu_470_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        map_h_reg_563 <= s2_pooling_layer1_map_h;
        map_w_reg_558 <= s2_pooling_layer1_map_w;
        s2_pooling_layer1_map_count_read_reg_568 <= s2_pooling_layer1_map_count;
        trunc_ln197_1_reg_578 <= trunc_ln197_1_fu_285_p1;
        trunc_ln197_2_reg_583 <= trunc_ln197_2_fu_289_p1;
        trunc_ln197_reg_573 <= trunc_ln197_fu_281_p1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (1'b0 == ap_ce))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state30_blk = 1'b1;
    end else begin
        ap_ST_fsm_state30_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state31_blk = 1'b1;
    end else begin
        ap_ST_fsm_state31_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state32_blk = 1'b1;
    end else begin
        ap_ST_fsm_state32_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state33_blk = 1'b1;
    end else begin
        ap_ST_fsm_state33_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state36_blk = 1'b1;
    end else begin
        ap_ST_fsm_state36_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state37_blk = 1'b1;
    end else begin
        ap_ST_fsm_state37_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state38_blk = 1'b1;
    end else begin
        ap_ST_fsm_state38_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state39_blk = 1'b1;
    end else begin
        ap_ST_fsm_state39_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state40_blk = 1'b1;
    end else begin
        ap_ST_fsm_state40_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state41_blk = 1'b1;
    end else begin
        ap_ST_fsm_state41_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state42_blk = 1'b1;
    end else begin
        ap_ST_fsm_state42_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state43_blk = 1'b1;
    end else begin
        ap_ST_fsm_state43_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state44_blk = 1'b1;
    end else begin
        ap_ST_fsm_state44_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state45_blk = 1'b1;
    end else begin
        ap_ST_fsm_state45_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state46_blk = 1'b1;
    end else begin
        ap_ST_fsm_state46_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state47_blk = 1'b1;
    end else begin
        ap_ST_fsm_state47_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state48_blk = 1'b1;
    end else begin
        ap_ST_fsm_state48_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state49_blk = 1'b1;
    end else begin
        ap_ST_fsm_state49_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state50_blk = 1'b1;
    end else begin
        ap_ST_fsm_state50_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state51_blk = 1'b1;
    end else begin
        ap_ST_fsm_state51_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state52_blk = 1'b1;
    end else begin
        ap_ST_fsm_state52_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state53_blk = 1'b1;
    end else begin
        ap_ST_fsm_state53_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state54_blk = 1'b1;
    end else begin
        ap_ST_fsm_state54_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state55_blk = 1'b1;
    end else begin
        ap_ST_fsm_state55_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state56_blk = 1'b1;
    end else begin
        ap_ST_fsm_state56_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state57_blk = 1'b1;
    end else begin
        ap_ST_fsm_state57_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state58_blk = 1'b1;
    end else begin
        ap_ST_fsm_state58_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state59_blk = 1'b1;
    end else begin
        ap_ST_fsm_state59_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state60_blk = 1'b1;
    end else begin
        ap_ST_fsm_state60_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state61_blk = 1'b1;
    end else begin
        ap_ST_fsm_state61_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state62_blk = 1'b1;
    end else begin
        ap_ST_fsm_state62_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state63_blk = 1'b1;
    end else begin
        ap_ST_fsm_state63_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state64_blk = 1'b1;
    end else begin
        ap_ST_fsm_state64_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state65_blk = 1'b1;
    end else begin
        ap_ST_fsm_state65_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state66_blk = 1'b1;
    end else begin
        ap_ST_fsm_state66_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state67_blk = 1'b1;
    end else begin
        ap_ST_fsm_state67_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state68_blk = 1'b1;
    end else begin
        ap_ST_fsm_state68_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state69_blk = 1'b1;
    end else begin
        ap_ST_fsm_state69_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state70_blk = 1'b1;
    end else begin
        ap_ST_fsm_state70_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state71_blk = 1'b1;
    end else begin
        ap_ST_fsm_state71_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state72_blk = 1'b1;
    end else begin
        ap_ST_fsm_state72_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state73_blk = 1'b1;
    end else begin
        ap_ST_fsm_state73_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state74_blk = 1'b1;
    end else begin
        ap_ST_fsm_state74_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state75_blk = 1'b1;
    end else begin
        ap_ST_fsm_state75_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state76_blk = 1'b1;
    end else begin
        ap_ST_fsm_state76_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state77_blk = 1'b1;
    end else begin
        ap_ST_fsm_state77_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state78_blk = 1'b1;
    end else begin
        ap_ST_fsm_state78_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_done == 1'b0) | (1'b0 == ap_ce))) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c1_conv_layer2_data_address0 = grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_address0;
    end else begin
        c1_conv_layer2_data_address0 = zext_ln203_fu_466_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c1_conv_layer2_data_ce0 = grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_ce0;
    end else begin
        c1_conv_layer2_data_ce0 = c1_conv_layer2_data_ce0_local;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce))) begin
        c1_conv_layer2_data_ce0_local = 1'b1;
    end else begin
        c1_conv_layer2_data_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c1_conv_layer2_data_ce1 = grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_ce1;
    end else begin
        c1_conv_layer2_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state46)))) begin
        grp_fu_259_ce = 1'b1;
    end else begin
        grp_fu_259_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state46)))) begin
        grp_fu_263_ce = 1'b1;
    end else begin
        grp_fu_263_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state77)))) begin
        grp_fu_267_ce = 1'b1;
    end else begin
        grp_fu_267_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state37)))) begin
        grp_fu_271_ce = 1'b1;
    end else begin
        grp_fu_271_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state37)))) begin
        grp_fu_276_ce = 1'b1;
    end else begin
        grp_fu_276_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7)))) begin
        grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_ce = 1'b1;
    end else begin
        grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) & (1'b1 == ap_ce))) begin
        s2_pooling_layer2_data_ce0_local = 1'b1;
    end else begin
        s2_pooling_layer2_data_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) & (1'b1 == ap_ce))) begin
        s2_pooling_layer2_data_we0_local = 1'b1;
    end else begin
        s2_pooling_layer2_data_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln197_fu_305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln199_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln201_fu_401_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln197_fu_310_p2 = (k_fu_128 + 31'd1);

assign add_ln199_1_fu_460_p2 = (indvars_iv24_reg_197 + 32'd2);

assign add_ln199_fu_454_p2 = (indvars_iv19_reg_209 + 32'd2);

assign add_ln201_fu_448_p2 = (m_reg_232 + 32'd2);

assign add_ln203_1_fu_433_p2 = (tmp_6_reg_596 + shl_ln_fu_425_p3);

assign add_ln203_fu_420_p2 = (trunc_ln201_2_fu_416_p1 + empty_reg_611);

assign add_ln212_1_fu_443_p2 = (tmp_6_reg_596 + add_ln212_fu_438_p2);

assign add_ln212_fu_438_p2 = (trunc_ln201_fu_412_p1 + empty_16_reg_616);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bit_sel_fu_506_p3 = bitcast_ln11_fu_502_p1[64'd63];

assign bitcast_ln11_fu_502_p1 = grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_max_value_1_out;

assign bitcast_ln212_fu_541_p1 = div_i_reg_714;

assign c1_conv_layer2_W_address0 = 16'd0;

assign c1_conv_layer2_W_address1 = 16'd0;

assign c1_conv_layer2_W_ce0 = 1'b0;

assign c1_conv_layer2_W_ce1 = 1'b0;

assign c1_conv_layer2_W_d0 = 64'd0;

assign c1_conv_layer2_W_d1 = 64'd0;

assign c1_conv_layer2_W_we0 = 1'b0;

assign c1_conv_layer2_W_we1 = 1'b0;

assign c1_conv_layer2_b_address0 = 7'd0;

assign c1_conv_layer2_b_address1 = 7'd0;

assign c1_conv_layer2_b_ce0 = 1'b0;

assign c1_conv_layer2_b_ce1 = 1'b0;

assign c1_conv_layer2_b_d0 = 64'd0;

assign c1_conv_layer2_b_d1 = 64'd0;

assign c1_conv_layer2_b_we0 = 1'b0;

assign c1_conv_layer2_b_we1 = 1'b0;

assign c1_conv_layer2_dW_address0 = 16'd0;

assign c1_conv_layer2_dW_address1 = 16'd0;

assign c1_conv_layer2_dW_ce0 = 1'b0;

assign c1_conv_layer2_dW_ce1 = 1'b0;

assign c1_conv_layer2_dW_d0 = 64'd0;

assign c1_conv_layer2_dW_d1 = 64'd0;

assign c1_conv_layer2_dW_we0 = 1'b0;

assign c1_conv_layer2_dW_we1 = 1'b0;

assign c1_conv_layer2_data_address1 = grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_c1_conv_layer2_data_address1;

assign c1_conv_layer2_db_address0 = 7'd0;

assign c1_conv_layer2_db_address1 = 7'd0;

assign c1_conv_layer2_db_ce0 = 1'b0;

assign c1_conv_layer2_db_ce1 = 1'b0;

assign c1_conv_layer2_db_d0 = 64'd0;

assign c1_conv_layer2_db_d1 = 64'd0;

assign c1_conv_layer2_db_we0 = 1'b0;

assign c1_conv_layer2_db_we1 = 1'b0;

assign c1_conv_layer2_error_address0 = 17'd0;

assign c1_conv_layer2_error_address1 = 17'd0;

assign c1_conv_layer2_error_ce0 = 1'b0;

assign c1_conv_layer2_error_ce1 = 1'b0;

assign c1_conv_layer2_error_d0 = 64'd0;

assign c1_conv_layer2_error_d1 = 64'd0;

assign c1_conv_layer2_error_we0 = 1'b0;

assign c1_conv_layer2_error_we1 = 1'b0;

assign c1_conv_layer2_map_common_address0 = 10'd0;

assign c1_conv_layer2_map_common_address1 = 10'd0;

assign c1_conv_layer2_map_common_ce0 = 1'b0;

assign c1_conv_layer2_map_common_ce1 = 1'b0;

assign c1_conv_layer2_map_common_d0 = 64'd0;

assign c1_conv_layer2_map_common_d1 = 64'd0;

assign c1_conv_layer2_map_common_we0 = 1'b0;

assign c1_conv_layer2_map_common_we1 = 1'b0;

assign empty_16_fu_356_p0 = i_reg_186[16:0];

assign empty_fu_351_p0 = i_reg_186[15:0];

assign grp_fu_276_p1 = xor_ln_fu_524_p3;

assign grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start = grp_max_pooling_fprop1_Pipeline_VITIS_LOOP_204_4_fu_244_ap_start_reg;

assign icmp_ln197_fu_305_p2 = (($signed(zext_ln197_fu_301_p1) < $signed(s2_pooling_layer1_map_count_read_reg_568)) ? 1'b1 : 1'b0);

assign icmp_ln199_fu_332_p2 = (($signed(zext_ln199_fu_328_p1) < $signed(map_h_reg_563)) ? 1'b1 : 1'b0);

assign icmp_ln201_fu_401_p2 = (($signed(zext_ln201_fu_397_p1) < $signed(map_w_reg_558)) ? 1'b1 : 1'b0);

assign icmp_ln204_fu_361_p2 = ((indvars_iv19_reg_209 != indvars_iv24_reg_197) ? 1'b1 : 1'b0);

assign indvars_iv_next31_fu_406_p2 = (j_reg_221 + 31'd1);

assign indvars_iv_next39_fu_337_p2 = (i_reg_186 + 31'd1);

assign m_1_fu_489_p3 = {{tmp_8_fu_479_p4}, {1'd1}};

assign max_value_fu_475_p1 = c1_conv_layer2_data_load_reg_664;

assign or_ln_fu_377_p3 = {{tmp_7_fu_367_p4}, {1'd1}};

assign s2_pooling_layer2_W_address0 = 16'd0;

assign s2_pooling_layer2_W_address1 = 16'd0;

assign s2_pooling_layer2_W_ce0 = 1'b0;

assign s2_pooling_layer2_W_ce1 = 1'b0;

assign s2_pooling_layer2_W_d0 = 64'd0;

assign s2_pooling_layer2_W_d1 = 64'd0;

assign s2_pooling_layer2_W_we0 = 1'b0;

assign s2_pooling_layer2_W_we1 = 1'b0;

assign s2_pooling_layer2_b_address0 = 7'd0;

assign s2_pooling_layer2_b_address1 = 7'd0;

assign s2_pooling_layer2_b_ce0 = 1'b0;

assign s2_pooling_layer2_b_ce1 = 1'b0;

assign s2_pooling_layer2_b_d0 = 64'd0;

assign s2_pooling_layer2_b_d1 = 64'd0;

assign s2_pooling_layer2_b_we0 = 1'b0;

assign s2_pooling_layer2_b_we1 = 1'b0;

assign s2_pooling_layer2_dW_address0 = 16'd0;

assign s2_pooling_layer2_dW_address1 = 16'd0;

assign s2_pooling_layer2_dW_ce0 = 1'b0;

assign s2_pooling_layer2_dW_ce1 = 1'b0;

assign s2_pooling_layer2_dW_d0 = 64'd0;

assign s2_pooling_layer2_dW_d1 = 64'd0;

assign s2_pooling_layer2_dW_we0 = 1'b0;

assign s2_pooling_layer2_dW_we1 = 1'b0;

assign s2_pooling_layer2_data_address0 = zext_ln212_fu_537_p1;

assign s2_pooling_layer2_data_ce0 = s2_pooling_layer2_data_ce0_local;

assign s2_pooling_layer2_data_d0 = bitcast_ln212_fu_541_p1;

assign s2_pooling_layer2_data_we0 = s2_pooling_layer2_data_we0_local;

assign s2_pooling_layer2_db_address0 = 7'd0;

assign s2_pooling_layer2_db_address1 = 7'd0;

assign s2_pooling_layer2_db_ce0 = 1'b0;

assign s2_pooling_layer2_db_ce1 = 1'b0;

assign s2_pooling_layer2_db_d0 = 64'd0;

assign s2_pooling_layer2_db_d1 = 64'd0;

assign s2_pooling_layer2_db_we0 = 1'b0;

assign s2_pooling_layer2_db_we1 = 1'b0;

assign s2_pooling_layer2_error_address0 = 17'd0;

assign s2_pooling_layer2_error_address1 = 17'd0;

assign s2_pooling_layer2_error_ce0 = 1'b0;

assign s2_pooling_layer2_error_ce1 = 1'b0;

assign s2_pooling_layer2_error_d0 = 64'd0;

assign s2_pooling_layer2_error_d1 = 64'd0;

assign s2_pooling_layer2_error_we0 = 1'b0;

assign s2_pooling_layer2_error_we1 = 1'b0;

assign s2_pooling_layer2_map_common_address0 = 10'd0;

assign s2_pooling_layer2_map_common_address1 = 10'd0;

assign s2_pooling_layer2_map_common_ce0 = 1'b0;

assign s2_pooling_layer2_map_common_ce1 = 1'b0;

assign s2_pooling_layer2_map_common_d0 = 64'd0;

assign s2_pooling_layer2_map_common_d1 = 64'd0;

assign s2_pooling_layer2_map_common_we0 = 1'b0;

assign s2_pooling_layer2_map_common_we1 = 1'b0;

assign select_ln204_fu_385_p3 = ((icmp_ln204_fu_361_p2[0:0] == 1'b1) ? indvars_iv24_reg_197 : or_ln_fu_377_p3);

assign shl_ln_fu_425_p3 = {{add_ln203_fu_420_p2}, {1'd0}};

assign tmp_6_fu_320_p3 = {{trunc_ln197_3_fu_316_p1}, {10'd0}};

assign tmp_7_fu_367_p4 = {{indvars_iv19_reg_209[31:1]}};

assign tmp_8_fu_479_p4 = {{m_reg_232[16:1]}};

assign trunc_ln11_fu_520_p1 = bitcast_ln11_fu_502_p1[62:0];

assign trunc_ln197_1_fu_285_p1 = c1_conv_layer1_map_w[15:0];

assign trunc_ln197_2_fu_289_p1 = s2_pooling_layer1_map_w[16:0];

assign trunc_ln197_3_fu_316_p1 = k_fu_128[6:0];

assign trunc_ln197_fu_281_p1 = c1_conv_layer1_map_w[16:0];

assign trunc_ln201_1_fu_470_p1 = m_reg_232[16:0];

assign trunc_ln201_2_fu_416_p1 = j_reg_221[15:0];

assign trunc_ln201_fu_412_p1 = j_reg_221[16:0];

assign xor_ln11_fu_514_p2 = (bit_sel_fu_506_p3 ^ 1'd1);

assign xor_ln_fu_524_p3 = {{xor_ln11_fu_514_p2}, {trunc_ln11_fu_520_p1}};

assign zext_ln197_fu_301_p1 = k_fu_128;

assign zext_ln199_fu_328_p1 = i_reg_186;

assign zext_ln201_fu_397_p1 = j_reg_221;

assign zext_ln203_fu_466_p1 = add_ln203_1_reg_634;

assign zext_ln212_fu_537_p1 = add_ln212_1_reg_639;

always @ (posedge ap_clk) begin
    tmp_6_reg_596[9:0] <= 10'b0000000000;
    add_ln203_1_reg_634[0] <= 1'b0;
    m_1_reg_679[0] <= 1'b1;
end

endmodule //max_pooling_fprop1
