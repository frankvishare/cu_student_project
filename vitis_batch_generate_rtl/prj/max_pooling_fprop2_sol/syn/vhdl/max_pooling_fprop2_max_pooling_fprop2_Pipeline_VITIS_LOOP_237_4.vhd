-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pooling_fprop2_max_pooling_fprop2_Pipeline_VITIS_LOOP_237_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    indvars_iv19_cast : IN STD_LOGIC_VECTOR (31 downto 0);
    max_value : IN STD_LOGIC_VECTOR (63 downto 0);
    sext_ln234 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_7 : IN STD_LOGIC_VECTOR (16 downto 0);
    empty : IN STD_LOGIC_VECTOR (16 downto 0);
    zext_ln236 : IN STD_LOGIC_VECTOR (16 downto 0);
    c3_conv_layer2_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    c3_conv_layer2_data_ce0 : OUT STD_LOGIC;
    c3_conv_layer2_data_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    c3_conv_layer2_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    c3_conv_layer2_data_ce1 : OUT STD_LOGIC;
    c3_conv_layer2_data_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_1 : IN STD_LOGIC_VECTOR (16 downto 0);
    max_value_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    max_value_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of max_pooling_fprop2_max_pooling_fprop2_Pipeline_VITIS_LOOP_237_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln237_reg_445 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln234_cast_fu_148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln234_cast_reg_435 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_1_reg_440 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln237_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_15_fu_178_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_15_reg_449 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln241_2_fu_187_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln241_2_reg_455 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal add_ln241_3_fu_196_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln241_3_reg_460 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal c3_conv_layer2_data_load_reg_475 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_1_reg_480 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln241_1_fu_219_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln241_1_reg_485 : STD_LOGIC_VECTOR (51 downto 0);
    signal c3_conv_layer2_data_load_1_reg_490 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_495 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln241_3_fu_233_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln241_3_reg_500 : STD_LOGIC_VECTOR (51 downto 0);
    signal max_value_1_load_1_reg_505 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal bitcast_ln241_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln241_reg_511 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln241_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_1_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_1_reg_522 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_2_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_2_reg_527 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_3_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_3_reg_532 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_6_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_6_reg_537 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_7_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_7_reg_542 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_547 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_value_2_fu_324_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_value_2_reg_552 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln241_1_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln241_1_reg_559 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_565 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln241_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln241_1_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_value_1_fu_62 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal max_value_3_fu_384_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal n_fu_66 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln237_fu_295_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv19_cast_cast_fu_152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal c3_conv_layer2_data_ce1_local : STD_LOGIC;
    signal c3_conv_layer2_data_ce0_local : STD_LOGIC;
    signal grp_fu_144_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal empty_15_fu_178_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln241_fu_183_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln241_1_fu_192_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal bitcast_ln241_2_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_249_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln241_fu_259_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln241_1_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln241_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln241_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln241_1_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln241_3_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_337_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln241_2_fu_347_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln241_5_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_4_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln241_2_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln241_3_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln241_2_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln241_3_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_144_ce : STD_LOGIC;
    signal ap_block_pp0_stage5_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_218 : BOOLEAN;
    signal ap_condition_517 : BOOLEAN;
    signal ap_condition_522 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component max_pooling_fprop2_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component max_pooling_fprop2_mul_17s_17s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component max_pooling_fprop2_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    dcmp_64ns_64ns_1_2_no_dsp_1_U1 : component max_pooling_fprop2_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_144_p0,
        din1 => grp_fu_144_p1,
        ce => grp_fu_144_ce,
        opcode => ap_const_lv5_3,
        dout => grp_fu_144_p2);

    mul_17s_17s_17_1_1_U2 : component max_pooling_fprop2_mul_17s_17s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        din0 => empty_15_fu_178_p0,
        din1 => empty_7,
        dout => empty_15_fu_178_p2);

    flow_control_loop_pipe_sequential_init_U : component max_pooling_fprop2_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                if ((ap_const_logic_1 = ap_ce)) then 
                    ap_CS_fsm <= ap_NS_fsm;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    max_value_1_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_const_boolean_1 = ap_condition_517)) then 
                    max_value_1_fu_62 <= max_value;
                elsif ((ap_const_boolean_1 = ap_condition_218)) then 
                    max_value_1_fu_62 <= max_value_3_fu_384_p3;
                end if;
            end if; 
        end if;
    end process;

    n_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_const_boolean_1 = ap_condition_517)) then 
                    n_fu_66 <= indvars_iv19_cast_cast_fu_152_p1;
                elsif ((ap_const_boolean_1 = ap_condition_522)) then 
                    n_fu_66 <= add_ln237_fu_295_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln241_2_reg_455 <= add_ln241_2_fu_187_p2;
                add_ln241_3_reg_460 <= add_ln241_3_fu_196_p2;
                bitcast_ln241_1_reg_559 <= bitcast_ln241_1_fu_330_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_logic_1 = ap_ce))) then
                bitcast_ln241_reg_511 <= bitcast_ln241_fu_241_p1;
                icmp_ln241_1_reg_522 <= icmp_ln241_1_fu_269_p2;
                icmp_ln241_2_reg_527 <= icmp_ln241_2_fu_275_p2;
                icmp_ln241_3_reg_532 <= icmp_ln241_3_fu_280_p2;
                icmp_ln241_6_reg_537 <= icmp_ln241_6_fu_285_p2;
                icmp_ln241_7_reg_542 <= icmp_ln241_7_fu_290_p2;
                icmp_ln241_reg_517 <= icmp_ln241_fu_263_p2;
                max_value_1_load_1_reg_505 <= max_value_1_fu_62;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                c3_conv_layer2_data_load_1_reg_490 <= c3_conv_layer2_data_q0;
                c3_conv_layer2_data_load_reg_475 <= c3_conv_layer2_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                empty_15_reg_449 <= empty_15_fu_178_p2;
                icmp_ln237_reg_445 <= icmp_ln237_fu_169_p2;
                max_value_2_reg_552 <= max_value_2_fu_324_p3;
                n_1_reg_440 <= n_fu_66;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sext_ln234_cast_reg_435 <= sext_ln234_cast_fu_148_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp_1_reg_480 <= c3_conv_layer2_data_q1(62 downto 52);
                tmp_4_reg_495 <= c3_conv_layer2_data_q0(62 downto 52);
                trunc_ln241_1_reg_485 <= trunc_ln241_1_fu_219_p1;
                trunc_ln241_3_reg_500 <= trunc_ln241_3_fu_233_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_2_reg_547 <= grp_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_5_reg_565 <= grp_fu_144_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_condition_exit_pp0_iter0_stage4, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln237_fu_295_p2 <= std_logic_vector(unsigned(n_1_reg_440) + unsigned(ap_const_lv64_1));
    add_ln241_1_fu_192_p2 <= std_logic_vector(unsigned(empty_15_reg_449) + unsigned(m_1));
    add_ln241_2_fu_187_p2 <= std_logic_vector(unsigned(zext_ln236) + unsigned(add_ln241_fu_183_p2));
    add_ln241_3_fu_196_p2 <= std_logic_vector(unsigned(zext_ln236) + unsigned(add_ln241_1_fu_192_p2));
    add_ln241_fu_183_p2 <= std_logic_vector(unsigned(empty_15_reg_449) + unsigned(empty));
    and_ln241_1_fu_318_p2 <= (or_ln241_fu_305_p2 and and_ln241_fu_313_p2);
    and_ln241_2_fu_373_p2 <= (or_ln241_3_fu_369_p2 and or_ln241_2_fu_363_p2);
    and_ln241_3_fu_379_p2 <= (tmp_5_reg_565 and and_ln241_2_fu_373_p2);
    and_ln241_fu_313_p2 <= (tmp_2_reg_547 and or_ln241_1_fu_309_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage2_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage3_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage4_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage5_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_condition_218_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
                ap_condition_218 <= ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4));
    end process;


    ap_condition_517_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
                ap_condition_517 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_522_assign_proc : process(ap_enable_reg_pp0_iter0_reg, icmp_ln237_reg_445, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
                ap_condition_522 <= ((icmp_ln237_reg_445 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5));
    end process;


    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln237_reg_445)
    begin
        if (((icmp_ln237_reg_445 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln241_1_fu_330_p1 <= c3_conv_layer2_data_load_1_reg_490;
    bitcast_ln241_2_fu_245_p1 <= max_value_1_fu_62;
    bitcast_ln241_3_fu_334_p1 <= max_value_2_reg_552;
    bitcast_ln241_fu_241_p1 <= c3_conv_layer2_data_load_reg_475;
    c3_conv_layer2_data_address0 <= zext_ln241_1_fu_205_p1(17 - 1 downto 0);
    c3_conv_layer2_data_address1 <= zext_ln241_fu_201_p1(17 - 1 downto 0);
    c3_conv_layer2_data_ce0 <= c3_conv_layer2_data_ce0_local;

    c3_conv_layer2_data_ce0_local_assign_proc : process(ap_ce, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            c3_conv_layer2_data_ce0_local <= ap_const_logic_1;
        else 
            c3_conv_layer2_data_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    c3_conv_layer2_data_ce1 <= c3_conv_layer2_data_ce1_local;

    c3_conv_layer2_data_ce1_local_assign_proc : process(ap_ce, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            c3_conv_layer2_data_ce1_local <= ap_const_logic_1;
        else 
            c3_conv_layer2_data_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    empty_15_fu_178_p0 <= n_fu_66(17 - 1 downto 0);

    grp_fu_144_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage5_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))))) then 
            grp_fu_144_ce <= ap_const_logic_1;
        else 
            grp_fu_144_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_144_p0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, max_value_2_reg_552, max_value_1_fu_62, ap_block_pp0_stage5, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_144_p0 <= max_value_2_reg_552;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_144_p0 <= max_value_1_fu_62;
        else 
            grp_fu_144_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_144_p1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, bitcast_ln241_fu_241_p1, bitcast_ln241_1_fu_330_p1, ap_block_pp0_stage5, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_144_p1 <= bitcast_ln241_1_fu_330_p1;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_144_p1 <= bitcast_ln241_fu_241_p1;
        else 
            grp_fu_144_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln237_fu_169_p2 <= "1" when (n_fu_66 = sext_ln234_cast_reg_435) else "0";
    icmp_ln241_1_fu_269_p2 <= "1" when (trunc_ln241_fu_259_p1 = ap_const_lv52_0) else "0";
    icmp_ln241_2_fu_275_p2 <= "0" when (tmp_1_reg_480 = ap_const_lv11_7FF) else "1";
    icmp_ln241_3_fu_280_p2 <= "1" when (trunc_ln241_1_reg_485 = ap_const_lv52_0) else "0";
    icmp_ln241_4_fu_351_p2 <= "0" when (tmp_3_fu_337_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln241_5_fu_357_p2 <= "1" when (trunc_ln241_2_fu_347_p1 = ap_const_lv52_0) else "0";
    icmp_ln241_6_fu_285_p2 <= "0" when (tmp_4_reg_495 = ap_const_lv11_7FF) else "1";
    icmp_ln241_7_fu_290_p2 <= "1" when (trunc_ln241_3_reg_500 = ap_const_lv52_0) else "0";
    icmp_ln241_fu_263_p2 <= "0" when (tmp_fu_249_p4 = ap_const_lv11_7FF) else "1";
        indvars_iv19_cast_cast_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indvars_iv19_cast),64));

    max_value_1_out <= max_value_1_fu_62;

    max_value_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_ce, icmp_ln237_reg_445, ap_loop_exit_ready, ap_block_pp0_stage4_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln237_reg_445 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            max_value_1_out_ap_vld <= ap_const_logic_1;
        else 
            max_value_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    max_value_2_fu_324_p3 <= 
        max_value_1_load_1_reg_505 when (and_ln241_1_fu_318_p2(0) = '1') else 
        bitcast_ln241_reg_511;
    max_value_3_fu_384_p3 <= 
        max_value_2_reg_552 when (and_ln241_3_fu_379_p2(0) = '1') else 
        bitcast_ln241_1_reg_559;
    or_ln241_1_fu_309_p2 <= (icmp_ln241_3_reg_532 or icmp_ln241_2_reg_527);
    or_ln241_2_fu_363_p2 <= (icmp_ln241_5_fu_357_p2 or icmp_ln241_4_fu_351_p2);
    or_ln241_3_fu_369_p2 <= (icmp_ln241_7_reg_542 or icmp_ln241_6_reg_537);
    or_ln241_fu_305_p2 <= (icmp_ln241_reg_517 or icmp_ln241_1_reg_522);
        sext_ln234_cast_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln234),64));

    tmp_3_fu_337_p4 <= bitcast_ln241_3_fu_334_p1(62 downto 52);
    tmp_fu_249_p4 <= bitcast_ln241_2_fu_245_p1(62 downto 52);
    trunc_ln241_1_fu_219_p1 <= c3_conv_layer2_data_q1(52 - 1 downto 0);
    trunc_ln241_2_fu_347_p1 <= bitcast_ln241_3_fu_334_p1(52 - 1 downto 0);
    trunc_ln241_3_fu_233_p1 <= c3_conv_layer2_data_q0(52 - 1 downto 0);
    trunc_ln241_fu_259_p1 <= bitcast_ln241_2_fu_245_p1(52 - 1 downto 0);
    zext_ln241_1_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln241_3_reg_460),64));
    zext_ln241_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln241_2_reg_455),64));
end behav;
