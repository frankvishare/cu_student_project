// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conv_fprop1_conv_fprop1_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        c1_conv_layer2_map_common_address0,
        c1_conv_layer2_map_common_ce0,
        c1_conv_layer2_map_common_we0,
        c1_conv_layer2_map_common_d0,
        size
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
output  [9:0] c1_conv_layer2_map_common_address0;
output   c1_conv_layer2_map_common_ce0;
output   c1_conv_layer2_map_common_we0;
output  [63:0] c1_conv_layer2_map_common_d0;
input  [31:0] size;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] exitcond_fu_79_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] p_cast13_fu_64_p1;
reg   [10:0] empty_fu_32;
wire   [10:0] empty_17_fu_69_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_p_load;
reg    c1_conv_layer2_map_common_we0_local;
reg    c1_conv_layer2_map_common_ce0_local;
wire   [31:0] p_cast21_fu_75_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_55;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 empty_fu_32 = 11'd0;
#0 ap_done_reg = 1'b0;
end

conv_fprop1_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        if ((1'b1 == ap_ce)) begin
            ap_CS_fsm <= ap_NS_fsm;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b0 == ap_ce) | (1'b1 == ap_block_state1_pp0_stage0_iter0)) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_55)) begin
        empty_fu_32 <= empty_17_fu_69_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_ce) | (1'b1 == ap_block_state1_pp0_stage0_iter0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_ce) | (1'b1 == ap_block_state1_pp0_stage0_iter0)) & (exitcond_fu_79_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_ce) | (1'b1 == ap_block_state1_pp0_stage0_iter0)) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_ce) | (1'b1 == ap_block_state1_pp0_stage0_iter0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_p_load = 11'd0;
    end else begin
        ap_sig_allocacmp_p_load = empty_fu_32;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        c1_conv_layer2_map_common_ce0_local = 1'b1;
    end else begin
        c1_conv_layer2_map_common_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        c1_conv_layer2_map_common_we0_local = 1'b1;
    end else begin
        c1_conv_layer2_map_common_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_condition_55 = ((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign c1_conv_layer2_map_common_address0 = p_cast13_fu_64_p1;

assign c1_conv_layer2_map_common_ce0 = c1_conv_layer2_map_common_ce0_local;

assign c1_conv_layer2_map_common_d0 = 64'd0;

assign c1_conv_layer2_map_common_we0 = c1_conv_layer2_map_common_we0_local;

assign empty_17_fu_69_p2 = (ap_sig_allocacmp_p_load + 11'd1);

assign exitcond_fu_79_p2 = ((p_cast21_fu_75_p1 == size) ? 1'b1 : 1'b0);

assign p_cast13_fu_64_p1 = ap_sig_allocacmp_p_load;

assign p_cast21_fu_75_p1 = empty_17_fu_69_p2;

endmodule //conv_fprop1_conv_fprop1_Pipeline_1
